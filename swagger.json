{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "northstar-backend",
    "description": "Barefoot Nomad - Making company travel and accomodation easy and convinient.",
    "contact": {}
  },
  "schemes": ["https", "http"],
  "host": "",
  "basePath": "/api/v1",
  "securityDefinitions": {
    "x-access": {
      "description": "Standard Authorization header using the bearer scheme. Example: \"bearer {token}\"",
      "type": "apiKey",
      "name": "x-access-token",
      "in": "header"
    },
    "Bearer": {
      "description": "Sends the bearer token in the header in the format \"Bearer {token}\"",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "consumes": ["application/json"],
  "tag": [
    {
      "name": "Auth",
      "description": "Endpoints for Authentication"
    },
    {
      "name": "User",
      "description": "Endpoints associated with users"
    },
    {
      "name": "Requests",
      "description": "Endpoints for Requests"
    },
    {
      "name": "Bookings",
      "description": "Endpoints associated with bookings"
    },
    {
      "name": "Facilities",
      "description": "Endpoints for Facilities"
    },
    {
      "name": "Comment",
      "description": "Endpoint for Comments"
    },
    {
      "name": "Notifications",
      "description": "Endpoint for Notifications"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "description": "User Sign Up",
        "summary": "Registers a user with all required information",
        "tags": ["Auth"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user  basic information",
            "schema": {
              "$ref": "#/requestBody/signup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "description": "A user can sign in",
        "summary": "This endpoint receives POST request sign in a user",
        "tags": ["Auth"],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the signin endpoint",
            "schema": {
              "$ref": "#/requestBody/signin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "description": "A user can sign in/register with a Google account",
        "summary": "This endpoint receives GET requests to sign in or register a user using a Google account",
        "tags": [
          "Auth"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "responses": {
          "201": {
            "description": "A new user created"
          },
          "200": {
            "description": "An existing user retrieved"
          },
          "401": {
            "description": "Signin error"
          }
        }
      }
    },
    "/auth/passwordreset": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Enables a user to request a password reset",
        "operationId": "passwordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "registered user email ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserMail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "you will receive a link in your mail shortly to proceed",
            "schema": {
              "$ref": "#/definitions/PasswordResetSucess"
            }
          },
          "400": {
            "description": "password reset failed",
            "schema": {
              "$ref": "#/definitions/PasswordResetFail"
            }
          }
        }
      }
    },
    "/auth/facebook": {
      "get": {
        "description": "A user can sign in/register with a Facebook account",
        "summary": "This endpoint receives GET requests to sign in or register a user using a Facebook account",
        "tags": [
          "Auth"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "responses": {
          "201": {
            "description": "A new user created"
          },
          "200": {
            "description": "An existing user retrieved"
          },
          "401": {
            "description": "Signin error"
          }
        }
      }
    },
    "/profile": {
      "patch": {
        "description": "Update profile",
        "summary": "Updates a user's profile",
        "tags": ["User"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Every field here is optional. However, at least one filed has to be sent",
            "schema": { "$ref": "#/requestBody/profileUpdate"}
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "401": { "description": "Authentication Error" },
          "422": { "description": "Validation Error" },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/role": {
      "patch": {
        "description": "Update profile",
        "summary": "Updates a user's role",
        "tags": ["User"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Every field here is optional. However, at least one filed has to be",
            "schema": { "$ref": "#/requestBody/roleSettings" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "401": { "description": "Authentication Error" },
          "403": { "description": "Authentication Error" },
          "422": { "description": "Validation Error" },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/feedback/facility/{id}": {
      "get": {
        "description": "Get feedback for a facility by ID",
        "summary": "Returns feedback for a single facility",
        "tags": [
          "Feedback"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "format": "int64",
            "required": true,
            "description": "ID of facility to check for feedback"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Supply the 'Bearer <token>'"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Facility-Feedback"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Facility not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/:id": {
      "patch": {
        "description": "A manager can reject a user's request application",
        "summary": "When a manager login, he/she sees a list of requests made by users under him and he is able to reject their requests",
        "tags": ["Requests"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user request status",
            "schema": {
              "$ref": "#/requestBody/reject_request"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bookings/:booking_id": {
      "patch":{
        "description": "A user can check into a facility",
        "summary": "A user should be able to check into a facility so that he/she can have the permission to rate or give feedback on a facility",
        "tags": ["Bookings"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "params",
            "name": "params",
            "required": true,
            "description": "The unique identifier of a booking"
          }
        ],
        "responses": {
          "200": "success",
          "401": "Authentication error",
          "403": "Authorization error",
          "404": "Booking not found",
          "422": "Validation error",
          "500": "Server error"
        }
      }
    },

    "/facilities": {
      "get": {
        "description": "An one can get all requests on barefoot nomad",
        "summary": "Any one who visits barefoot nomad can see all the facilities listed there",
        "tags": [
          "Facilities"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the response body of the facilities",
            "schema": {
              "$ref": "#/requestBody/get-all-facilities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Facilities Endpoint",
        "summary": "Travel_Admin/Super_Admin Can create Acommodation Facilities",
        "tags": [
          "Facilities"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object for the facilities endpoint",
            "schema": {
              "$ref": "#/requestBody/facilities"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "401": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessible Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "facilities/:facility_id": {
      "get":{
        "description": "Gets one facility",
        "summary": "Retrieves one facility",
        "tags": ["Facilities"],
        "produces": [ "application/json" ],
        "security": [],
        "parameters": [
          {
            "in": "params",
            "name": "facility_id",
            "required": true,
            "description": "Facility's unique identifier"
          }
        ],
        "responses": {
          "200": { "description": "Success"},
          "401": { "description": "Authentication error"},
          "404": { "description": "Not found"},
          "422": { "description": "Validation error"},
          "500": { "description": "Server error"}
        }
      }
    },
    "/facilities/rooms": {
      "post": {
        "description": "Rooms Endpoint",
        "summary": "Travel_Admin/Super_Admin Can add rooms to an Acommodation Facilities",
        "tags": [
          "Facilities"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object for the rooms endpoint",
            "schema": {
              "$ref": "#/requestBody/rooms"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "401": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessible Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/facilities/:facility_id/like": {
      "post": {
        "description": "A logged in user can like a facility",
        "summary": "Any logged in user who visits barefoot nomad can like any facility listed there",
        "tags": [
          "Facilities"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the response body of the facility likes",
            "schema": {
              "$ref": "#/requestBody/likes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments": {
      "post":{
        "description": "Post Comment",
        "summary": "Adds a comment to a trip request",
        "tags": ["Comment"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user request status",
            "schema": { "$ref": "#/requestBody/postComment" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "401": { "description": "Authentication Error" },
          "403": { "description": "Authentication Error: Access Denied" },
          "404": { "description": "Not Found" },
          "422": { "description": "Validation Error" },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/comment/:comment_id": {
      "delete": {
        "description": "User can delete comment",
        "summary": "allows a user to delete his/her comment",
        "tags": ["Comment"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user request status",
            "schema": {
              "$ref": "#/requestBody/delete_comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/managers": {
      "delete": {
        "description": "User can get all managers",
        "summary": "allows a user to retrieve all managers",
        "tags": [""],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user request status",
            "schema": {
              "$ref": "#"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "requests/history": {
      "get": {
         "tags": ["Requests"],
         "summary": "Retrieves a user's trips and bookings history",
         "security": [],
         "produces": ["application/json"],
         "responses": {
           "200": { "description": "success"},
           "401": { "description": "Unauthorized"},
           "404": { "description": "Not found"},
           "500": { "description": "Internal Server Error"}
         }
        }
    },
    "/requests/{request_id}": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Fetch a single travel request",
        "description": "This endpoint fetches a single travel request (with booking and user) using its ID. Only a request owner, his/her manager, or super admin can access a request",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "description": "ID of the travel request to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid token"
          },
          "403": {
            "description": "No permission to view resource"
          },
          "404": {
            "description": "Travel request not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests": {
      "get": {
        "tags": ["Requests"],
        "summary": "Get requests",
        "description": "Send GET requests to fetch all requests for a super admin, or all by a user, or a manager's surbodinates. Also query travel requests",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "request_id",
            "in": "query",
            "description": "Query by a request's ID",
            "type": "int64"
          },
          {
            "name": "owner",
            "in": "query",
            "description": "Query by requests user email (may not be the full email)",
            "type": "string"
          },
          {
            "name": "destination",
            "in": "query",
            "description": "Query by requests destination",
            "type": "string"
          },
          {
            "name": "origin",
            "in": "query",
            "description": "Query by requests origin",
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "description": "Query by requests duration in days",
            "type": "int64"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Query by requests start (departure) date",
            "type": "string",
            "format": "date"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Query by requests status",
            "type": "string",
            "enum": ["pending", "approved", "declined"]
          },
          {
            "name": "category",
            "in": "query",
            "description": "Query by requests category",
            "type": "string",
            "enum": ["one-way", "multi-city", "round-trip"]
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid token, no valid query parameter in search and/or invalid query parameter value"
          },
          "403": {
            "description": "No token provided"
          },
          "404": {
            "description": "No result found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/facilities/rooms/{room_id}/book": {
      "post": {
        "tags": ["Facilities"],
        "summary": "Book an accomodation facility",
        "description": "This endpoint receives POST requests to book a room in a facility.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "The ID of the room to be booked",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The request body consisting of a \"departure_date\" field and a \"return_date\" field.",
            "schema": {
              "$ref":"#/requestBody/bookRoom"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request. Invalid date fields, or date fields (or combination) not logical"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Referenced room not found"
          },
          "409": {
            "description": "Booking dates conflict with an existing booking for same room"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Fetch notifications",
        "description": "This endpoint fetches unread notifications that belong to a user",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
           
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "description": "Unauthorized"
          },         
          "500": {
            "description": "Internal Server Error"
        }
      }
    }
    }          
  },
  "requestBody": {
    "signup": {
      "title": "Signup Request",
      "type": "object",
      "properties": {
        "email": {
          "description": "email of the user",
          "type": "string"
        },
        "first_name": {
          "description": "First name of the user",
          "type": "string"
        },
        "last_name": {
          "description": "Last name of the user",
          "type": "string"
        },
        "password": {
          "description": "The Password of the user",
          "type": "string"
        },
        "gender": {
          "description": "Gender of the user",
          "type": "string"
        },
        "birth_date": {
          "description": "Birth Date is Admin: true or false",
          "type": "varchar"
        },
        "preferred_language": {
          "description": "User's preferred_language",
          "type": "string"
        },
        "preferred_currency": {
          "description": "User' preferred_currency",
          "type": "string"
        },
        "location": {
          "description": "Location of user",
          "type": "string"
        },
        "role": {
          "description": "User's role",
          "type": "string"
        },
        "isVerified": {
          "description": "User's verification status",
          "type": "string"
        }
      },
      "example": {
        "email": "chioma@gmail.com",
        "first_name": "Ejike",
        "last_name": "Chiemerie",
        "password": "secret123",
        "gender": "female",
        "birth_date": "16/06/1994",
        "preferred_language": "english",
        "preferred_currency": "USD",
        "location": "Lagos",
        "role": "manager",
        "isVerified": "false"
      }
    },
    "signin": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "description": "User email",
          "type": "string"
        },
        "password": {
          "description": "User password",
          "type": "string"
        }
      },
      "example": {
        "email": "user@example.com",
        "password": "youknowbetter"
      }
    },

    "profileUpdate": {
      "type": "object",
      "title": "Update profile request body specification",
      "required": [],
      "properties": {
        "first_name": {
          "description": "user's first name",
          "type": "string"
        },
        "last_name": {
          "description": "user's last name",
          "type": "string"
        },
        "gender": {
          "description": "user's gender ('male', 'female' or 'other')",
          "type": "string"
        },
        "birth_date": {
          "description": "user's date of birth",
          "type": "string"
        },
        "preferred_language": {
          "description": "user's preferred language",
          "type": "string"
        },
        "preferred_currency": {
          "description": "user's preferred currency ('NGN', 'USD', 'GBP', 'YEN', or 'EUR')",
          "type": "string"
        },
        "manager_id": {
          "description": "user's manager's unique identifier",
          "type": "integer"
        },
        "location": {
          "description": "user's location",
          "type": "string"
        },
        "email_notification": {
          "description": "determines whether a user opts in or out of email notifications",
          "type": "boolean"
        }
      },
      "example": {
        "first_name": "Joseph",
        "last_name": "Doe",
        "gender": "male",
        "birth_date": "07/07/1977",
        "preferred_language": "english",
        "preferred_currency": "NGN",
        "manager_id": 1,
        "location": "Lagos",
        "email_notification": false
      }
    },
    "roleSettings": {
      "title": "Role Settings Request",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email of user to be upgraded",
          "type": "string"
        },
        "role": {
          "description": "Role to assign: 'super_admin', 'manager', 'trave_admin', or 'requester'",
          "type": "string"
        }
      },
      "example": {
        "email": "jane_doe@email.com",
        "role": "manager"
      }
    },
    "reject_request": {
      "title": "Manager Reject Request",
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of the user's request application",
          "type": "string"
        },
        "id": {
          "description": "ID of the request being rejected",
          "type": "Integer"
        }
      },
      "example": {
        "status": "success",
        "data": {
          "id": 1,
          "user_id": 1,
          "category": "one-way",
          "origin": "Paris",
          "destination": ["Lagos"],
          "departure_date": "2019-08-30T00:43:35.816Z",
          "return_date": null,
          "reason": "I am tired of this office",
          "booking_id": 1,
          "status": "declined",
          "createdAt": "2019-08-30T00:43:35.816Z",
          "updatedAt": "2019-08-30T00:45:51.983Z"
        }
      }
    },
    "facilities": {
      "type": "object",
      "title": "Accomodation Facilities Request",
      "required": [
        "name",
        "street",
        "city",
        "country",
        "address",
        "number_of_rooms",
        "available_space",
        "images",
        "description"
      ],
      "properties": {
        "name": {
          "description": "Name of Accomodation Facility",
          "type": "string"
        },
        "street": {
          "description": "Street of Accomodation Facility",
          "type": "string"
        },
        "city": {
          "description": "City of Accomodation Facility",
          "type": "string"
        },
        "country": {
          "description": "Country of Accomodation Facility",
          "type": "string"
        },
        "address": {
          "description": "Location Address of an Accomodation Facility",
          "type": "string"
        },
        "description": {
          "description": "Short Description of an Accomodation Facility",
          "type": "string"
        },
        "number_of_rooms": {
          "description": "Number of rooms on an Accomodation Facility",
          "type": "string"
        },
        "available_space": {
          "description": "Number of available rooms on an Accomodation Facility",
          "type": "string"
        },
        "images": {
          "description": "Relevant images of an Accomodation Facility",
          "type": "string"
        }
      },
      "example": {
        "name": "Kings Palace Hotel",
        "street": "34, Hotel",
        "city": "NY",
        "country": "USA",
        "address": "Otolo, Nnewi",
        "number_of_rooms": "8",
        "available_space": 7,
        "images": [
          "https://cloudinary.com/16x16/1.png",
          "https://cloudinary.com/16x16/1.png"
        ],
        "description": "Our services are the best"
      }
    },
    "rooms": {
      "type": "object",
      "title": "Rooms Request",
      "required": [
        "name",
        "type",
        "price",
        "facility_id",
        "images"
      ],
      "properties": {
        "name": {
          "description": "Name of room on an Accomodation Facility",
          "type": "string"
        },
        "type": {
          "description": "Category of a room on an Accomodation Facility",
          "type": "string"
        },
        "facility_id": {
          "description": "The ID of the Accomodation Facility that houses the rooms",
          "type": "string"
        },
        "images": {
          "description": "Relevant images of the rooms on an Accomodation Facility",
          "type": "string"
        }
      },
      "example": {
        "name": "5Room Now",
        "type": "rExecutive",
        "price": 8000,
        "facility_id": 2,
        "images": [
          "https://cloudinary.com/16x16/1.png",
          "https://cloudinary.com/16x16/1.png"
        ]
      }
    },
    "likes": {
      "title": "Users like a facility",
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of the like",
          "type": "Boolean"
        },
        "facility_id": {
          "description": "ID of the facility being liked",
          "type": "Integer"
        }
      },
      "example": {
        "status": "success",
        "data": {
          "id": 3,
          "facility_id": 2,
          "user_id": 1,
          "status": true,
          "createdAt": "2019-09-08T10:20:29.311Z",
          "updatedAt": "2019-09-08T10:54:35.576Z"
        }
      }
    },
    "get-all-facilities": {
      "title": "Get All Facilities",
      "type": "Array",
      "example": {
        "status": "success",
        "data": [
          {
            "id": 1,
            "name": "Hotel Kentucy",
            "address": "21 El Nino Road",
            "number_of_rooms": 22,
            "images": null,
            "description": "The El Nino facility",
            "available_space": 22,
            "createdAt": "2019-09-05T18:39:43.279Z",
            "updatedAt": "2019-09-05T18:39:43.279Z"
          },
          {
            "id": 2,
            "name": "Hotel Portugal",
            "address": "22 Portugal Road",
            "number_of_rooms": 100,
            "images": null,
            "description": "The Hotel Portugal facility",
            "available_space": 100,
            "createdAt": "2019-09-05T18:39:43.279Z",
            "updatedAt": "2019-09-05T18:39:43.279Z"
          },
          {
            "id": 3,
            "name": "Kings Palace Hotel",
            "address": "Otolo, Nnewi",
            "number_of_rooms": 8,
            "images": [
              "https://cloudinary.com/16x16/1.png",
              "https://cloudinary.com/16x16/1.png"
            ],
            "description": "Our services are the best",
            "available_space": 7,
            "createdAt": "2019-09-05T18:39:51.988Z",
            "updatedAt": "2019-09-05T18:39:51.988Z"
          }
        ]
      }
    },
    "postComment": {
      "title": "Post Comment on Request",
      "type": "object",
      "properties": {
        "request_id": {
          "description": "Id of trip request to add the comment to",
          "type": "integer"
        },
        "comment": {
          "description": "Comment",
          "type": "string"
        }
      },
      "example": {
        "request_id": 5,
        "comment": "How is this going to go down?"
      }
    },
    "delete_comment": {
      "title": "User delete Comment",
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of the user's request application",
          "type": "string"
        },
        "comment_id": {
          "description": "ID of the comment to be deleted",
          "type": "integer"
        }
      },
      "example": {
        "status": "success",
        "data": {
          "message": "comment deleted successfully"
        }
      }
    },
    "bookRoom": {
      "title": "Book an accomodation",
      "type": "object",
      "required": ["departure_date", "return_date"],
      "properties": {
        "departure_date": {
          "description": "The date from which the booking will be effective",
          "type": "string",
          "format": "date"
        },
        "return_date": {
          "description": "The date at which the booking will cease to be effective",
          "type": "string",
          "format": "date"
        }
      },
      "example": {
        "departure_date": "2019-10-22",
        "return_date": "2020-02-19"
      }
    }
  }
}
