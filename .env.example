#### Instructions:

# Because the .env files will not be commited to git,
# you should follow the process below to reproduce it.

#### 1. Create a .env file and add the values for each environment e.g.
# Please take note that the dummy values below will not work.
# They are just to show you what yours shoud look like.

DB_URI_DEVELOPMENT="https://devwebsite.com"
DB_USER_DEVELOPMENT=devUser
DB_PASSWORD_DEVELOPMENT=devPassword

DB_URI_STAGING="https://stagingWebsite.com"
DB_USER_STAGING=stagingUser
DB_PASSWORD_STAGING=stagingUser

DB_URI_TEST="https://prodwebsite.com"
DB_USER_TEST=prodUser
DB_PASSWORD_TEST=prodPassword

.................
.................
.................

# YOu can add more variables as your app deems fit.


#### 2. Start your application is the required environment e.g.

### From TERMINAL;
# development
NODE_ENV=development <your startup command here>
# OR, production
NODE_ENV=production <your startup command here>

### OR From the startup scripts;

"scripts": {
    "start:dev": "NODE_ENV=development <your startup command here>",
    "start:staging": "NODE_ENV=staging <your startup command here>",
    "start:prod": "NODE_ENV=production <your startup command here>",
  },


#### 3. In your application modules, access the .env variables for the working environment.
#### Using 'development' environment as our case-study:

if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config()

  # OR; if using ES6:

  import { config } from dotenv;
  config();
}

# get the current working environment && convert to uppercase
const thisENV = (process.env.NODE_ENV).toUpperCase();

# access the environment variables for this environment (ES6 style):
const dbUri = process.env[`${DB_URI}_${thisENV}`];
const dbUser = process.env[`${DB_USER}_${thisENV}`];
const dbPassword = process.env[`${DB_PASSWORD}_${thisENV}`];

# Enviroment variables needed for Sequelize
DEV_DB_URL
DEV_DB_USER
DEV_DB_PASSWORD
DEV_DATABASE